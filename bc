#!/usr/bin/bc -lq

# bc functions
# with some functions and settings by theo (see ~/bin/bc and ~/bc/)"

# based on:
# http://www.pixelbeat.org/scripts/bc
# License: LGPLv2
# Author:
#    http://www.pixelbeat.org/
# Notes:
#    I only use bc when python is not available.
#    Personally I have this file in ~/bin/bc so
#    that I can just invoke bc as normal and have these
#    extra functions available.
# Changes:
#    V0.1, 11 Apr 2007, Initial release


# scale=4;

pi=4*a(1);

define min(x,y) {
	if (x<y) return x
	return y
}

define max(x,y) {
	if (x>y) return x
	return y
}

define abs(x) {
	if (x<0) return -x
	return x
}

define mod(x,y) { 
	auto old_scale   /* variables global by default */
	old_scale=scale  /* scale is global */
	scale=0; ret=x%y
	scale=old_scale
	return ret
}

/* take integer part */
define int(x) {
	auto old_scale   /* variables global by default */
	old_scale=scale  /* scale is global */
	scale=0; ret=x/1
	scale=old_scale
	return ret
}

/* round to nearest integer */
define round(x) {
	if (x<0) x-=.5 else x+=.5
	return int(x)
}

/* smallest integer >= arg */
define ceil(x) {
	auto intx
	intx=int(x)
	if (intx<x) intx+=1
	return intx
}

/* largest integer <= arg */
define floor(x) {
	return -ceil(-x)
}

/* Greatest Common Divisor or Highest Common Factor of x and y */
/* Note when people say Lowest Common Denominator they usually mean this */
/* anything that divides into x and y also divides into the remainder of x/y */
define gcd2int(x,y) {
	x = int(abs(x)); y = int(abs(y))
	s=scale; scale=0
	if(x<y) { t=y;y=x;x=t }
	while(y) { t=y;y=x%t;x=t }
	scale=s
	return x
}

/* Lowest Common Multiple of x and y */
/* Lowest Common Denominator of fractions is LCM of the denominators */
define lcm(x,y) {
	return (x*y/gcd(x,y))
}

/* Coprime integers */
define coprime(x,y)
{
	if (gcd(u,v)==1) return 1
	return 0;
} 
